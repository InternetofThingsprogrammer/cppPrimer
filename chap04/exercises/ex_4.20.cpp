//练习 4.20：假设 iter 的类型是 vector<string>::iterator，说明下面的表达式是否合法。
//如果合法，表达式的含义是什么？如果不合法，错在何处？
// (a) *iter++;         (b) (*iter)++;          (c) *iter.empty();
// (d) iter->empty()    (e) ++*iter;            (f) iter++->empty();

/*
 * (a) 合法。先将 iter 移动到下一个元素，然后获取移动之前 iter 指向的字符串。
 * (b) 不合法。*iter 获得的是一个字符串对象，字符串对象上没有递增操作。
 * (c) 不合法。成员访问运算符的优先级高于解引用运算符的优先级，表达式在一个迭代器上进行 . 运算符操作是错误的。
 * (d) 合法。调用成员函数 empty 判断 iter 所指的字符串对象是否为空。
 * (e) 不合法。前置递增运算符与解引用运算符的优先级相同并且都遵循右结合顺序，所以表达式首先获取 iter 所指的字符串对象然后对其进行递增操作。
 * (f) 合法。首先判断 iter 所指的字符串是否为空，接着将 iter 移动到下一个字符串，然后返回移动前的迭代器的副本。
 */

